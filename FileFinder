#%%
import os
import pandas as pd


infra_path = "./Data 1/"
infra_files = {
    "Bridge": os.path.join(infra_path, "converted_coordinates_Resultat_Bridge.csv"),
    "RailJoint": os.path.join(infra_path, "converted_coordinates_Resultat_RailJoint.csv"),
    "Turnout": os.path.join(infra_path, "converted_coordinates_Turnout.csv")
}


infra_dfs = []
for file in infra_files.values():
    df = pd.read_csv(file)
    df.columns = df.columns.str.strip()
    df = df[["Latitude", "Longitude"]].dropna()
    df["Latitude"] = pd.to_numeric(df["Latitude"], errors="coerce")
    df["Longitude"] = pd.to_numeric(df["Longitude"], errors="coerce")
    infra_dfs.append(df)

infra_all = pd.concat(infra_dfs, ignore_index=True)

def is_matching_folder(folder_path, infra_lat_min, infra_lat_max, infra_lon_min, infra_lon_max):
    lat_path = os.path.join(folder_path, "GPS.latitude.csv")
    lon_path = os.path.join(folder_path, "GPS.longitude.csv")

    if not (os.path.exists(lat_path) and os.path.exists(lon_path)):
        return False

    lat_df = pd.read_csv(lat_path, header=None, names=["Latitude"])
    lon_df = pd.read_csv(lon_path, header=None, names=["Longitude"])

    df = pd.concat([lat_df, lon_df], axis=1).dropna()
    if df.empty:
        return False

    match = df[
        (df["Latitude"] >= infra_lat_min) & (df["Latitude"] <= infra_lat_max) &
        (df["Longitude"] >= infra_lon_min) & (df["Longitude"] <= infra_lon_max)
    ]
    return not match.empty

data2_root = "./Data 2/"
subfolders = [os.path.join(data2_root, name) for name in os.listdir(data2_root)
              if os.path.isdir(os.path.join(data2_root, name))]

# Margin of error from infrastructure
infra_lat_min = infra_all["Latitude"].min() - 0.001
infra_lat_max = infra_all["Latitude"].max() + 0.001
infra_lon_min = infra_all["Longitude"].min() - 0.001
infra_lon_max = infra_all["Longitude"].max() + 0.001

# Find matching folders
matching_folders = []
for folder in subfolders:
    if is_matching_folder(folder, infra_lat_min, infra_lat_max, infra_lon_min, infra_lon_max):
        print(f"Matching: {folder}")
        matching_folders.append(folder)
    else:
        print(f" Not matching: {folder}")

print(f"\\n=== Matching folders: {len(matching_folders)} ===")
for match in matching_folders:
    print(match)

data_folder = matching_folders[0]
#%%
